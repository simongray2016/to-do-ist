{"version":3,"sources":["empty.svg","model/Task.js","model/Project.js","model/TaskData.js","model/GetData.js","reducers/taskReducer.js","constants/actionTypes.js","reducers/editReducer.js","reducers/actionReducer.js","reducers/addReducer.js","reducers/viewCompletedList.js","reducers/tabView.js","reducers/index.js","actions/taskActions.js","components/QuickAdd.js","components/SearchBar.js","components/ShowCompleted.js","components/TopBar.js","components/Filter.js","components/LeftMenu.js","components/Priority.js","components/ScheduleAction.js","components/Form.js","components/TaskAction.js","components/ListItem.js","components/List.js","components/AddTask.js","components/ProjectAction.js","components/Empty.js","components/Content.js","components/DayList.js","components/ContentWeek.js","components/AddModal.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Task","name","date","priority","editName","newName","editDate","newDate","Date","editPriority","number","this","id","uuidv4","isCompleted","Project","setList","list","setCompletedList","completedList","addTask","task","push","updateListDate","addCompletedList","map","index","findIndex","splice","unshift","editTask","newTask","deleteTask","changePriority","findTaskName","query","filter","includes","setDate","sortBy","value","sort","task1","task2","charCodeAt","undoTask","now","getDate","listToday","today","listWeek","weekDay","TaskData","getFullYear","getMonth","taskList","initState","localList","JSON","parse","localStorage","getItem","setItem","stringify","inbox","taskReducer","state","action","type","isEdit","editReducer","actionReducer","isQuickAdd","isAdd","added","addReducer","show","viewCompletedList","tab","tabView","reducer","combineReducers","openEditForm","findTask","connect","dispatch","quickAdd","props","onClick","className","actions","listFilter","inputValue","trim","toLowerCase","onChange","selection","itemToString","getInputProps","getItemProps","getLabelProps","getMenuProps","isOpen","highlightedIndex","placeholder","length","key","item","style","background","count","showCompleted","TopBar","to","xmlns","width","height","viewBox","data-svgs-path","fill","fillRule","d","nextTab","hideCompletedList","cancelAdd","path","exact","isExact","children","match","e","preventDefault","redirect","icon","numberOfTask","useState","href","undefined","openAction","setPriority","toggle","callSetDate","openSchedule","setDateForm","setDaysWeek","days","locale","showNeighboringMonth","calendarType","minDate","closeQuickAdd","cancelEdit","setTask","error","setError","toggleSchedule","setToggleSchedule","togglePriority","setTogglePriority","clear","useEffect","checkAddTask","target","onKeyDown","onSubmitTask","autoFocus","Dropdown","DropdownToggle","tag","data-toggle","aria-expanded","moment","format","disabled","DropdownMenu","modifiers","setPosition","enabled","order","fn","data","styles","top","left","TaskAction","setState","Component","idEdit","indexAction","findId","completedTask","onpenEditForm","openTaskAction","closeTaskAction","clearId","clearAdded","setOpenAction","setOpenSchedule","scrollRef","useRef","offsetTop","current","console","log","window","scrollTo","behavior","setTimeout","getDifferentDays","thisMonth","colSpan","ref","showCompletedList","differentDays","textLine","viewDate","List","getBoundingClientRect","openForm","open","setOpen","src","empty","alt","Fragment","add","dayList","closeAdd","openAdd","setAdd","setClear","hideLoader","render","Boolean","location","hostname","loader","document","querySelector","showLoader","classList","remove","store","createStore","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.46d6c3b5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/empty.5720cad5.svg\";","import uuidv4 from 'uuid/v4'\r\n\r\nexport default class Task {\r\n    constructor(name,  date, priority = 4) {\r\n        this.id = uuidv4();\r\n        this.name = name;\r\n        this.date = date;\r\n        this.isCompleted = false;\r\n        this.priority = priority;\r\n    }\r\n\r\n    editName = (newName) => {\r\n        this.name = newName;\r\n    }\r\n\r\n    editDate = (newDate) => {\r\n        this.date = new Date(newDate);\r\n    }\r\n\r\n    completed() {\r\n        this.isCompleted = true;\r\n    }\r\n\r\n    editPriority = (number) => {\r\n        this.priority = number;\r\n    }\r\n}","export default class Project {\r\n    constructor() {\r\n        this.list = [];\r\n        this.completedList = [];\r\n        this.listToday = [];\r\n        this.listWeek = [];\r\n    };\r\n\r\n    setList = list => this.list = list;\r\n\r\n    setCompletedList = list => this.completedList = list;\r\n\r\n    addTask = task => {\r\n        this.list.push(task);\r\n        this.updateListDate();\r\n        return [...this.list];\r\n    }\r\n\r\n    addCompletedList = id => {\r\n        this.list = this.list.map(task => task.id === id ? { ...task, isCompleted: true } : task)\r\n        let index = this.list.findIndex(task => task.isCompleted)\r\n        let task = this.list.splice(index, 1);\r\n        this.completedList.unshift(task[0]);\r\n        this.updateListDate();\r\n    }\r\n\r\n    editTask = (id, newTask) => {\r\n        this.list = this.list.map(task => task.id === id ? { ...task, ...newTask } : task);\r\n        this.updateListDate();\r\n    }\r\n    deleteTask = id => {\r\n        let index = this.list.findIndex(task => task.id === id);\r\n        this.list.splice(index, 1);\r\n        this.updateListDate();\r\n    }\r\n\r\n    changePriority = (id, index) => {\r\n        this.list = this.list.map(task => task.id === id ? { ...task, priority: index } : task);\r\n        this.updateListDate();\r\n    }\r\n\r\n    findTaskName = query => this.list.filter(task => task.name.includes(query))\r\n\r\n    setDate = (id, date) => {\r\n        this.list = this.list.map(task => task.id === id ? { ...task, date } : task);\r\n        this.updateListDate();\r\n    }\r\n\r\n    sortBy = (value) => {\r\n        if (value === 'name') {\r\n            this.list.sort((task1, task2) => task1.name.charCodeAt(0) - task2.name.charCodeAt(0));\r\n        }\r\n        else {\r\n            this.list.sort((task1, task2) => task1[value] - task2[value]);\r\n        }\r\n        return [...this.list];\r\n    };\r\n\r\n    undoTask = id => {\r\n        this.completedList = this.completedList.map(task => task.id === id\r\n            ? { ...task, isCompleted: false, date: new Date() } : task);\r\n        let index = this.completedList.findIndex(task => !task.isCompleted);\r\n        let task = this.completedList.splice(index, 1);\r\n        this.addTask(task[0])\r\n        this.updateListDate();\r\n    };\r\n\r\n    updateListDate = () => {\r\n        let now = new Date().getDate();\r\n        let today = task => task.date.getDate() - now === 0;\r\n        let weekDay = task => {\r\n            let diffDays = task.date.getDate() - now;\r\n            if (diffDays < 8) {\r\n                return true\r\n            }\r\n        }\r\n        this.listToday = this.list.filter(task => today(task));\r\n        this.listWeek = this.list.filter(task => weekDay(task))\r\n}\r\n}","const now = new Date();\r\n\r\nconst TaskData = [\r\n    {name: 'Welcome to Todoist Let’s get you started with a few tips:', date: new Date(), priority: 2},\r\n    {name: 'Create a new task', date: new Date(now.getFullYear(), now.getMonth(), now.getDate() + 8), priority: 1},\r\n    {name: 'Schedule this task', date: new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1), priority: 4},\r\n    {name: 'Prioritizing your tasks', date: new Date(now.getFullYear(), now.getMonth(), now.getDate() + 5), priority: 3},\r\n]\r\n\r\nexport default TaskData;","import Project from './Project';\r\nimport Task from './Task';\r\nimport TaskData from './TaskData';\r\n\r\nlet taskList = new Project('inbox');\r\n\r\nfor ( let task of TaskData ) {\r\n    let {name, date, priority} = task;\r\n    let newTask = new Task(name, date, priority);\r\n    taskList.addTask(newTask);\r\n}\r\n\r\nexport default taskList;\r\n","import * as types from '../constants/actionTypes';\r\nimport Task from '../model/Task';\r\nimport Project from '../model/Project';\r\nimport inbox from '../model/GetData';\r\n\r\nlet initState = {\r\n    taskList: new Project(),\r\n    id: null,\r\n}\r\n\r\nlet localList = JSON.parse(localStorage.getItem('taskList'));\r\n\r\nif (!localList) {\r\n    localStorage.setItem('taskList', JSON.stringify(inbox));\r\n    localList = JSON.parse(localStorage.getItem('taskList'));\r\n}\r\n\r\ninitState.taskList.setList(localList.list);\r\n\r\ninitState.taskList.setCompletedList(localList.completedList);\r\n\r\ninitState.taskList.list = initState.taskList.list.map(task => {\r\n    let newDate = new Date(task.date);\r\n    return { ...task, date: newDate }\r\n})\r\n\r\ninitState.taskList.completedList = initState.taskList.completedList.map(task => {\r\n    let newDate = new Date(task.date);\r\n    return { ...task, date: newDate }\r\n})\r\n\r\ninitState.taskList.updateListDate();\r\n\r\nconst taskReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case types.ADD_TASK:\r\n            let { task } = action;\r\n            let newTask = new Task(task.name, task.date, task.priority);\r\n            state.taskList.list = state.taskList.addTask(newTask);\r\n            localStorage.setItem('taskList', JSON.stringify(state.taskList));\r\n            return { ...state };\r\n        case types.COMPLETED_TASK:\r\n            state.taskList.addCompletedList(action.id);\r\n            localStorage.setItem('taskList', JSON.stringify(state.taskList));\r\n            return { ...state };\r\n        case types.EDIT_TASK:\r\n            state.taskList.editTask(action.id, action.task);\r\n            localStorage.setItem('taskList', JSON.stringify(state.taskList));\r\n            return { ...state }\r\n        case types.DELETE_TASK:\r\n            state.taskList.deleteTask(action.id);\r\n            localStorage.setItem('taskList', JSON.stringify(state.taskList));\r\n            return { ...state }\r\n        case types.CHANGE_PRIORITY:\r\n            state.taskList.changePriority(action.id, action.index);\r\n            localStorage.setItem('taskList', JSON.stringify(state.taskList));\r\n            return { ...state }\r\n        case types.FIND_TASK:\r\n            state.id = action.id\r\n            return { ...state }\r\n        case types.CLEAR_ID:\r\n            state.id = null;\r\n            return { ...state }\r\n        case types.SET_DATE:\r\n            state.taskList.setDate(action.id, action.date);\r\n            localStorage.setItem('taskList', JSON.stringify(state.taskList));\r\n            return { ...state }\r\n        case types.SORT_BY_DATE:\r\n            state.taskList.list = state.taskList.sortBy(action.value);\r\n            return { ...state };\r\n        case types.SORT_BY_PRIORITY:\r\n            state.taskList.list = state.taskList.sortBy(action.value);\r\n            return { ...state };\r\n        case types.SORT_BY_NAME:\r\n            state.taskList.list = state.taskList.sortBy(action.value);\r\n            return { ...state };\r\n        case types.UNDO_TASK:\r\n            state.taskList.undoTask(action.id);\r\n            localStorage.setItem('taskList', JSON.stringify(state.taskList));\r\n            return { ...state };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default taskReducer;","export const ADD_TASK = 'ADD_TASK';\r\n\r\nexport const QUERY_SEARCH = 'QUERY_SEARCH';\r\n\r\nexport const QUICK_ADD = 'QUICK_ADD';\r\n\r\nexport const CLOSE_QUICK_ADD = 'CLOSE_QUICK_ADD'\r\n\r\nexport const CANCEL_ADD = 'CANCEL_ADD';\r\n\r\nexport const OPEN_FORM = 'OPEN_FORM';\r\n\r\nexport const COMPLETED_TASK = 'COMPLETED_TASK';\r\n\r\nexport const ONPEN_EDIT_FORM = 'ONPEN_EDIT_FORM';\r\n\r\nexport const CANCEL_EDIT = 'CANCEL_EDIT';\r\n\r\nexport const EDIT_TASK = \"EDIT_TASK\";\r\n\r\nexport const ONPEN_TASK_ACTION = \"ONPEN_TASK_ACTION\";\r\n\r\nexport const CLOSE_TASK_ACTION = \"CLOSE_TASK_ACTION\";\r\n\r\nexport const DELETE_TASK = \"DELETE_TASK\";\r\n\r\nexport const CHANGE_PRIORITY = \"CHANGE_PRIORITY\";\r\n\r\nexport const FIND_TASK = \"FIND_TASK\"\r\n\r\nexport const SET_ID = \"SET_ID\"\r\n\r\nexport const CLEAR_ID = \"CLEAR_ID\"\r\n\r\nexport const SET_DATE = \"SET_DATE\"\r\n\r\nexport const SORT_BY_DATE = \"SORT_BY_DATE\"\r\n\r\nexport const SORT_BY_NAME = \"SORT_BY_NAME\"\r\n\r\nexport const SORT_BY_PRIORITY = \"SORT_BY_PRIORITY\"\r\n\r\nexport const SHOW_COMPLETED_LIST = \"SHOW_COMPLETED_LIST\"\r\n\r\nexport const HIDE_COMPLETED_LIST = \"HIDE_COMPLETED_LIST\"\r\n\r\nexport const UNDO_TASK = \"UNDO_TASK\"\r\n\r\nexport const LIST_TODAY = \"LIST_TODAY\"\r\n\r\nexport const LIST_WEEK = \"LIST_WEEK\"\r\n\r\nexport const TAB = \"TAB\"\r\n\r\nexport const CLEAR_ADDED = \"CLEAR_ADDED\"\r\n\r\nexport const ADDED = \"ADDED\"\r\n","import * as types from '../constants/actionTypes';\r\n\r\nlet initState = {\r\n    isEdit: false,\r\n    id: null\r\n}\r\n\r\nconst editReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case types.ONPEN_EDIT_FORM:\r\n            return { isEdit: true, id: action.id}\r\n        case types.CANCEL_EDIT:\r\n            return { isEdit: false, id: null }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default editReducer;","import * as types from '../constants/actionTypes';\r\n\r\nlet initState = {\r\n    index: null\r\n}\r\n\r\nconst actionReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case types.ONPEN_TASK_ACTION:\r\n            return { index: action.index }\r\n        case types.CLOSE_TASK_ACTION:\r\n            return { index: null };\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport default actionReducer;","import * as types from '../constants/actionTypes';\r\n\r\nlet initState = {\r\n    isQuickAdd: false,\r\n    isAdd: false,\r\n    added: false,\r\n}\r\n\r\nconst addReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case types.QUICK_ADD:\r\n            state.isQuickAdd = true\r\n            return { ...state }\r\n        case types.CLOSE_QUICK_ADD:\r\n            state.isQuickAdd = false\r\n            return { ...state }\r\n        case types.CANCEL_ADD:\r\n            state.isAdd = false\r\n            return { ...state }\r\n        case types.OPEN_FORM:\r\n            state.isAdd = true\r\n            return { ...state }\r\n        case types.ADDED: {\r\n            if(state.isQuickAdd) {\r\n                state.added = true;\r\n            }\r\n            return { ...state }\r\n        }\r\n        case types.CLEAR_ADDED:\r\n            state.added = false;\r\n            return { ...state };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default addReducer;","import * as types from '../constants/actionTypes';\r\n\r\nlet initState = {\r\n    show: false\r\n}\r\n\r\nconst viewCompletedList = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case types.SHOW_COMPLETED_LIST:\r\n            return { show: true };\r\n        case types.HIDE_COMPLETED_LIST:\r\n            return { show: false }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default viewCompletedList;","import * as types from '../constants/actionTypes';\r\n\r\nlet initState = {\r\n    tab: 1\r\n}\r\n\r\nconst tabView = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case types.TAB:\r\n            return { tab: action.number }\r\n        default:\r\n            return { ...state }\r\n    }\r\n}\r\n\r\nexport default tabView;","import { combineReducers } from 'redux';\r\nimport taskReducer from './taskReducer';\r\nimport editReducer from './editReducer';\r\nimport actionReducer from './actionReducer';\r\nimport addReducer from './addReducer';\r\nimport viewCompletedList from './viewCompletedList';\r\nimport tabView from './tabView';\r\n\r\nconst reducer = combineReducers({\r\n    taskReducer,\r\n    editReducer,\r\n    actionReducer,\r\n    addReducer,\r\n    viewCompletedList,\r\n    tabView\r\n});\r\n\r\nexport default reducer;","import * as types from '../constants/actionTypes';\r\n\r\nexport const addTask = task => ({ type: types.ADD_TASK, task });\r\n\r\nexport const querySearch = query => ({ type: types.QUERY_SEARCH, query });\r\n\r\nexport const quickAdd = () => ({ type: types.QUICK_ADD });\r\n\r\nexport const closeQuickAdd = () => ({type: types.CLOSE_QUICK_ADD})\r\n\r\nexport const cancelAdd = () => ({ type: types.CANCEL_ADD });\r\n\r\nexport const openForm = () => ({ type: types.OPEN_FORM });\r\n\r\nexport const completedTask = id => ({ type: types.COMPLETED_TASK, id });\r\n\r\nexport const openEditForm = id => ({ type: types.ONPEN_EDIT_FORM, id });\r\n\r\nexport const cancelEdit = () => ({ type: types.CANCEL_EDIT});\r\n\r\nexport const editTask = (id, task) => ({ type: types.EDIT_TASK, id, task })\r\n\r\nexport const openTaskAction = index => ({ type: types.ONPEN_TASK_ACTION, index })\r\n\r\nexport const closeTaskAction = () => ({type: types.CLOSE_TASK_ACTION})\r\n\r\nexport const deleteTask = id => ({type: types.DELETE_TASK, id})\r\n\r\nexport const changePriority = (id, index) => ({type: types.CHANGE_PRIORITY, id, index})\r\n\r\nexport const findTask = id => ({type: types.FIND_TASK, id})\r\n\r\nexport const setId = id => ({type: types.SET_ID, id})\r\n\r\nexport const clearId = () => ({type: types.CLEAR_ID})\r\n\r\nexport const setDate = (id, date) => ({type: types.SET_DATE, id, date})\r\n\r\nexport const sortBy = value => ({type: types.SORT_BY_PRIORITY, value})\r\n\r\nexport const showCompletedList = () => ({type: types.SHOW_COMPLETED_LIST})\r\n\r\nexport const hideCompletedList = () => ({type: types.HIDE_COMPLETED_LIST})\r\n\r\nexport const undoTask = id => ({type: types.UNDO_TASK, id})\r\n\r\nexport const tabView = number => ({type: types.TAB, number})\r\n\r\nexport const clearAdded = () => ({type: types.CLEAR_ADDED})\r\n\r\nexport const added = () => ({type: types.ADDED})","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../actions/taskActions';\r\n\r\nfunction QuickAdd(props) {\r\n    return (\r\n        <div onClick={() => (!props.isAdd && !props.isEdit) && props.quickAdd()} className=\"quick-add\">\r\n            <span className=\"add-button\">\r\n                <i className=\"fa fa-plus\"></i>\r\n            </span>\r\n            <span className=\"add-tip\">\r\n                Quick Add Task\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    isAdd: state.addReducer.isAdd,\r\n    isEdit: state.editReducer.isEdit\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    quickAdd: () => dispatch(actions.quickAdd())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuickAdd);","import * as React from 'react';\r\nimport Downshift from 'downshift';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../actions/taskActions';\r\n\r\nfunction SearchBar(props) {\r\n    const list = () => {\r\n        if(props.tab === 1) {\r\n            return props.taskList.list\r\n        }\r\n        else if(props.tab === 2) {\r\n            return props.taskList.listToday\r\n        }\r\n        else return props.taskList.listWeek\r\n    }\r\n\r\n    const listFilter = value => {\r\n        let inputValue = value.trim().toLowerCase();\r\n        return list().filter(task => inputValue && task.name.toLowerCase().includes(inputValue))\r\n    }\r\n\r\n    return (\r\n        <Downshift\r\n            onChange={selection => selection && props.findTask(selection.id)}\r\n            itemToString={task => task ? '' : ''}\r\n        >\r\n            {({\r\n                getInputProps,\r\n                getItemProps,\r\n                getLabelProps,\r\n                getMenuProps,\r\n                isOpen,\r\n                inputValue,\r\n                highlightedIndex,\r\n            }) => (\r\n                    <div className=\"search-bar\">\r\n                        <label className=\"search-icon\" {...getLabelProps()}>\r\n                            <i className=\"fa fa-search\"></i>\r\n                        </label>\r\n                        <input {...getInputProps()}\r\n                            className=\"search\"\r\n                            placeholder=\"Quick search\"\r\n                        />\r\n                        {isOpen\r\n                            ? (listFilter(inputValue).length ? <div className=\"list-result\" {...getMenuProps()}>\r\n                                {listFilter(inputValue).map((task, index) => (\r\n                                    <div className=\"item\"\r\n                                        {...getItemProps({\r\n                                            key: index,\r\n                                            index,\r\n                                            item: task,\r\n                                            style: {\r\n                                                background:\r\n                                                    highlightedIndex === index ? '#363636' : '#282828',\r\n                                            },\r\n                                        })}\r\n                                    >\r\n                                        {task.name}\r\n                                    </div>\r\n                                ))}\r\n                                </div>\r\n                                : null)\r\n                            : null\r\n                        }\r\n                    </div>\r\n                )}\r\n        </Downshift>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    taskList: state.taskReducer.taskList,\r\n    tab: state.tabView.tab\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    findTask: id => dispatch(actions.findTask(id))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBar);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../actions/taskActions';\r\n\r\nfunction ShowCompleted(props) {\r\n    return (\r\n        <div onClick={() => props.showCompleted()} className=\"quick-add\">\r\n            <span className=\"add-button\">\r\n                <i className=\"fa fa-check-circle\"></i>\r\n            </span>\r\n            <span className=\"add-tip\">\r\n                Show completed tasks\r\n            </span>\r\n            <span className=\"count-completed\">\r\n                {props.count}\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapState = state => ({\r\n    count: state.taskReducer.taskList.completedList.length\r\n})\r\n\r\nconst mapDispatch = dispatch => ({\r\n    showCompleted: () => dispatch(actions.showCompletedList())\r\n})\r\n\r\nexport default connect(mapState, mapDispatch)(ShowCompleted);","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport QuickAdd from './QuickAdd';\r\nimport SearchBar from './SearchBar';\r\nimport ShowCompleted from './ShowCompleted';\r\n\r\nexport default function TopBar(props) {\r\n    return (\r\n        <div className=\"top-bar w-100\">\r\n            <div className=\"logo\">\r\n                <Link to=\"/\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" data-svgs-path=\"sm1/todoist_logo.svg\"><path fill=\"currentColor\" fillRule=\"evenodd\" d=\"M21 0H3a3 3 0 0 0-3 3v3.7L4 9c.4.2.8.2 1.1 0l8-4.6a.8.8 0 0 1 .8 0l1 .5c.2.2.1.6 0 .7L5.1 11c-.4.3-.7.3-1.2 0L0 8.8v2l4 2.4c.4.2.8.2 1.1 0l8-4.6a.8.8 0 0 1 .8 0l1 .5c.2.1.1.5 0 .6l-9.7 5.6c-.4.2-.7.3-1.2 0A857 857 0 0 1 0 13v2l4 2.3c.4.2.8.2 1.1 0l8-4.6a.8.8 0 0 1 .8 0l1 .5c.2.2.1.6 0 .7l-9.7 5.5c-.4.3-.7.3-1.2 0a857 857 0 0 1-4-2.3v4A3 3 0 0 0 3 24h18a3 3 0 0 0 3-3V3a3 3 0 0 0-3-3\"></path></svg>\r\n                </Link>\r\n            </div>\r\n            <SearchBar />\r\n            <div className=\"d-flex\">\r\n                <QuickAdd />\r\n                <ShowCompleted />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import * as React from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../actions/taskActions';\r\n\r\nfunction Filter(props) {\r\n    const redirect = e => {\r\n        if (props.nextTab === props.tab) {\r\n            e.preventDefault()\r\n        }\r\n        else {\r\n            props.hideCompletedList();\r\n            props.cancelAdd();\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <Route\r\n            path={props.path}\r\n            exact={props.isExact}\r\n            children={({ match }) => {\r\n                match && props.tabView(props.tab);\r\n                return (\r\n                    <Link\r\n                        onClick={e => redirect(e)}\r\n                        to={props.path}\r\n                        className={match ? \"filter filter-active\" : \"filter\"}\r\n                    >\r\n                        <span className=\"filter-icon\">\r\n                            <i className={props.icon}></i>\r\n                        </span>\r\n                        <div className=\"item-content\">\r\n                            <span className=\"filter-name\">\r\n                                {props.name}\r\n                            </span>\r\n                            <span className=\"number-of-task\">\r\n                                {props.numberOfTask}\r\n                            </span>\r\n                        </div>\r\n                    </Link>\r\n                )\r\n            }}\r\n        >\r\n        </Route>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    nextTab: state.tabView.tab\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    hideCompletedList: () => dispatch(actions.hideCompletedList()),\r\n    cancelAdd: () => dispatch(actions.cancelAdd()),\r\n    tabView: number => dispatch(actions.tabView(number))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Filter from './Filter';\r\n\r\nfunction LeftMenu(props) {\r\n    return (\r\n        <div className=\"left-menu\">\r\n            <Filter\r\n                tab={1}\r\n                icon={\"fa fa-inbox\"}\r\n                name={\"Inbox\"}\r\n                path={\"/\"}\r\n                isExact={true}\r\n                numberOfTask={props.list === 0 ? '' : props.list}\r\n            />\r\n            <Filter\r\n                tab={2}\r\n                icon={\"fa fa-calendar-check-o\"}\r\n                name={\"Today\"}\r\n                path={\"/today\"}\r\n                numberOfTask={props.listToday === 0 ? '' : props.listToday}\r\n            />\r\n            <Filter\r\n                tab={3}\r\n                icon={\"fa fa-calendar\"}\r\n                name={\"Next 7 days\"}\r\n                path={\"/next-7-days\"}\r\n                numberOfTask={props.listWeek === 0 ? '' : props.listWeek}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    list: state.taskReducer.taskList.list.length,\r\n    listToday: state.taskReducer.taskList.listToday.length,\r\n    listWeek: state.taskReducer.taskList.listWeek.length\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(LeftMenu);","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../actions/taskActions';\r\n\r\nfunction Priority(props) {\r\n    const [index] = useState([4, 3, 2, 1]);\r\n\r\n    const changePriority = (e, index) => {\r\n        e.preventDefault();\r\n        if (props.openAction) {\r\n            props.changePriority(props.id, index)\r\n        }\r\n        else {\r\n            props.setPriority(index)\r\n        }\r\n        props.toggle();\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"item priority\">\r\n            <span>Priority</span>\r\n            <ul>\r\n                {index.map(index => <li key={index}>\r\n                    <a href=\"/\"\r\n                        className={index === props.priority ? 'current' : undefined}\r\n                        onClick={e => changePriority(e, index)}>\r\n                        <i className={`fa fa-flag${index === 4 ? '-o' : ''} priority-${index}`}></i>\r\n                        <span className=\"tip\">{`Priority ${index}`}</span>\r\n                    </a>\r\n                </li>)}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    changePriority: (id, index) => dispatch(actions.changePriority(id, index)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Priority);","import React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../actions/taskActions';\r\n\r\n\r\nfunction ScheduleAction(props) {\r\n\r\n    const callSetDate = value => {\r\n        if (props.openSchedule) {\r\n            props.setDate(props.id, value);\r\n            props.toggle();\r\n        }\r\n        else {\r\n            props.setDateForm(value);\r\n            props.toggle();\r\n        }\r\n    }\r\n\r\n    const setDaysWeek = (days) => {\r\n        let now = new Date();\r\n        let newDate = new Date(now.getFullYear(), now.getMonth(), now.getDate() + days);\r\n        if (props.openSchedule) {\r\n            props.setDate(props.id, newDate);\r\n            props.toggle();\r\n        }\r\n        else {\r\n            props.setDateForm(newDate);\r\n            props.toggle();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"task-action\">\r\n            <div\r\n                onClick={() => callSetDate(new Date())}\r\n                className=\"item\"\r\n            >\r\n                <span className=\"icon-label\">\r\n                    <i className=\"fa fa-calendar-check-o\"></i>\r\n                </span>\r\n                <span className=\"name-label\">Today</span>\r\n            </div>\r\n            <div\r\n                onClick={() => setDaysWeek(1)}\r\n                className=\"item\"\r\n            >\r\n                <span className=\"icon-label\">\r\n                    <i className=\"fa fa-sun-o\"></i>\r\n                </span>\r\n                <span className=\"name-label\">Tomorrow</span>\r\n            </div>\r\n            <div\r\n                onClick={() => setDaysWeek(7)}\r\n                className=\"item\"\r\n            >\r\n                <span className=\"icon-label\">\r\n                    <i className=\"fa fa-calendar-plus-o\"></i>\r\n                </span>\r\n                <span className=\"name-label\">Next week</span>\r\n            </div>\r\n            <div className=\"calendar\">\r\n                <Calendar\r\n                    value={props.date}\r\n                    locale=\"en-US\"\r\n                    showNeighboringMonth={false}\r\n                    calendarType=\"ISO 8601\"\r\n                    minDate={new Date()}\r\n                    onChange={value => callSetDate(value)}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setDate: (id, date) => dispatch(actions.setDate(id, date))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(ScheduleAction);","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../actions/taskActions';\r\nimport { Dropdown, DropdownMenu, DropdownToggle } from 'reactstrap';\r\n\r\nimport Priority from './Priority';\r\nimport ScheduleAction from './ScheduleAction';\r\nimport moment from 'moment';\r\n\r\nfunction Form(props) {\r\n\r\n    let now = new Date();\r\n\r\n    const [task, setTask] = useState({\r\n        name: props.isEdit ? props.name : '',\r\n        date: props.isEdit ? new Date(props.date) \r\n            : (props.weekDay ? new Date(now.getFullYear(), now.getMonth(), now.getDate() + props.weekDay) : null),\r\n        priority: props.isEdit ? props.priority : 4\r\n    });\r\n\r\n    const [error, setError] = useState(props.isEdit ? false : true)\r\n\r\n    const [toggleSchedule, setToggleSchedule] = useState(false);\r\n\r\n    const [togglePriority, setTogglePriority] = useState(false);\r\n\r\n    const {clear} = props;\r\n\r\n    useEffect(() => {\r\n        clear && setTask({ priority: 4, name: '' });\r\n    }, [clear])\r\n\r\n    const toggle = () => setTogglePriority(!togglePriority);\r\n\r\n    const onChangeTaskName = value => {\r\n        if (!value.trim()) {\r\n            setTask({ ...task, name: value });\r\n            setError(true);\r\n        }\r\n        else {\r\n            setTask({ ...task, name: value });\r\n            setError(false);\r\n        }\r\n    }\r\n\r\n    const checkAddTask = () => {\r\n        if (!error) {\r\n            if (props.isEdit) {\r\n                props.editTask(props.id, task);\r\n                props.cancelEdit();\r\n                props.toggle && props.toggle();\r\n            }\r\n            else {\r\n                let newTask = task;\r\n                if (!task.date) {\r\n                    setTask({ ...task, date: new Date() });\r\n                    newTask = ({ ...task, date: new Date() });\r\n                }\r\n                props.addTask(newTask);\r\n                props.isQuickAdd && props.added();\r\n                props.closeQuickAdd();\r\n            }\r\n            setTask({ name: '', date: null, priority: 4 });\r\n            setError(true);\r\n        }\r\n        props.isEdit && props.cancelEdit();\r\n    }\r\n\r\n    const onSubmitTask = e => {\r\n        e.key === \"Enter\" && checkAddTask();\r\n    }\r\n\r\n    const viewDate = () => task.date === null ? 'Schedule' : moment(task.date).format(\"DD MMM\");\r\n\r\n    const cancelAdd = () => {\r\n        props.isEdit ? props.cancelEdit() : props.cancelAdd();\r\n        props.toggle && props.toggle();\r\n    }\r\n\r\n    return (\r\n        <div className=\"form\">\r\n            <div className=\"form-input\">\r\n                <input onChange={(e) => onChangeTaskName(e.target.value)}\r\n                    type=\"text\"\r\n                    onKeyDown={(e) => onSubmitTask(e)}\r\n                    value={task.name}\r\n                    name=\"name-input\"\r\n                    placeholder=\"Eg: do something\"\r\n                    autoFocus\r\n                />\r\n                <Dropdown isOpen={toggleSchedule} toggle={() => setToggleSchedule(!toggleSchedule)}>\r\n                    <DropdownToggle\r\n                        tag=\"span\"\r\n                        data-toggle=\"dropdown\"\r\n                        aria-expanded={togglePriority}\r\n                    >\r\n                        <input\r\n                            className=\"schedule-input\"\r\n                            value={viewDate()}\r\n                            disabled\r\n                        />\r\n                    </DropdownToggle>\r\n                    <DropdownMenu className=\"p-0 rounded-0 m-0\">\r\n                        <ScheduleAction\r\n                            date={task.date === null ? new Date() : task.date}\r\n                            toggle={() => setToggleSchedule(false)}\r\n                            setDateForm={newDate => setTask({ ...task, date: newDate })}\r\n                        />\r\n                    </DropdownMenu>\r\n                </Dropdown>\r\n            </div>\r\n            <div className=\"form-action\">\r\n                <div>\r\n                    <button onClick={() => checkAddTask()} className=\"form-submit\">\r\n                        {props.isEdit ? 'Save' : 'Add Task'}\r\n                    </button>\r\n                    <button onClick={() => cancelAdd()} className=\"form-cancel\">\r\n                        Cancel\r\n                    </button>\r\n                </div>\r\n                <div>\r\n                    <Dropdown isOpen={togglePriority} toggle={() => setTogglePriority(!togglePriority)}>\r\n                        <DropdownToggle\r\n                            tag=\"span\"\r\n                            className=\"action-button-priority px-1 mr-4\"\r\n                            data-toggle=\"dropdown\"\r\n                            aria-expanded={togglePriority}\r\n                        >\r\n                            <i className={`fa fa-flag${task.priority === 4 ? '-o' : ''} priority-${task.priority}`}></i>\r\n                            <span className=\"tip\">Priority</span>\r\n                        </DropdownToggle>\r\n                        <DropdownMenu\r\n                            modifiers={{\r\n                                setPosition: {\r\n                                    enabled: true,\r\n                                    order: 890,\r\n                                    fn: (data) => {\r\n                                        return {\r\n                                            ...data,\r\n                                            styles: {\r\n                                                ...data.styles,\r\n                                                top: 4,\r\n                                                left: -70,\r\n                                            },\r\n                                        };\r\n                                    }\r\n                                }\r\n                            }}\r\n                            className=\"p-0 rounded-0 m-0\" >\r\n                            <Priority\r\n                                toggle={() => toggle()}\r\n                                priority={task.priority}\r\n                                setPriority={number => setTask({ ...task, priority: number })}\r\n                                id={props.id}\r\n                            />\r\n                        </DropdownMenu>\r\n                    </Dropdown>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    isEdit: state.editReducer.isEdit,\r\n    isQuickAdd: state.addReducer.isQuickAdd\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addTask: task => dispatch(actions.addTask(task)),\r\n    cancelAdd: () => dispatch(actions.cancelAdd()),\r\n    closeQuickAdd: () => dispatch(actions.closeQuickAdd()),\r\n    editTask: (id, task) => dispatch(actions.editTask(id, task)),\r\n    cancelEdit: () => dispatch(actions.cancelEdit()),\r\n    findTask: id => dispatch(actions.findTask(id)),\r\n    added: () => dispatch(actions.added())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);","import React, { Component } from 'react';\r\nimport Priority from './Priority';\r\nimport { Dropdown, DropdownMenu, DropdownToggle } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../actions/taskActions';\r\n\r\nclass TaskAction extends Component {\r\n\tstate = { \r\n\t\tindex: [4, 3, 2, 1],\r\n\t\topenAction: false\r\n\t}\r\n\r\n\ttoggle = () => {\r\n\t\tthis.setState({openAction: !this.state.openAction});\r\n\t\tthis.props.openAction();\r\n\t}\r\n\r\n\tdeleteTask = () => {\r\n\t\tthis.props.deleteTask(this.props.id);\r\n\t\tthis.toggle();\r\n\r\n\t}\r\n\r\n\topenEditForm = () => {\r\n\t\tthis.props.openEditForm(this.props.id);\r\n\t\tthis.props.cancelAdd();\r\n\t\tthis.toggle();\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet { openAction } = this.state;\r\n\t\treturn (\r\n\t\t\t<Dropdown isOpen={openAction} toggle={() => this.toggle()}>\r\n\t\t\t\t<DropdownToggle\r\n\t\t\t\t\ttag=\"span\"\r\n\t\t\t\t\tclassName=\"action-button\"\r\n\t\t\t\t\tdata-toggle=\"dropdown\"\r\n\t\t\t\t\taria-expanded={openAction}\r\n\t\t\t\t>\r\n\t\t\t\t\t<i className=\"fa fa-ellipsis-h\"></i>\r\n\t\t\t\t</DropdownToggle>\r\n\t\t\t\t<DropdownMenu className=\"task-action\">\r\n\t\t\t\t\t<div \r\n\t\t\t\t\t\tclassName=\"item\"\r\n\t\t\t\t\t\tonClick={() => this.openEditForm()}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<span><i className=\"fa fa-pencil icon-label\"></i></span>\r\n\t\t\t\t\t\t<span className=\"name-label\">Edit task</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<Priority \r\n\t\t\t\t\t\ttoggle={() => this.toggle()}\r\n\t\t\t\t\t\tid={this.props.id}\r\n\t\t\t\t\t\tpriority={this.props.priority}\r\n\t\t\t\t\t\topenAction={openAction}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclassName=\"item\"\r\n\t\t\t\t\t\tonClick={() => this.deleteTask()}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<span><i className=\"fa fa-trash-o icon-label\"></i></span>\r\n\t\t\t\t\t\t<span className=\"name-label\">Delete task</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</DropdownMenu>\r\n\t\t\t</Dropdown>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n\topenEditForm: index => dispatch(actions.openEditForm(index)),\r\n\tdeleteTask: id => dispatch(actions.deleteTask(id)),\r\n\tcancelAdd: () =>  dispatch(actions.cancelAdd())\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(TaskAction);","import React, { useState, useEffect, useRef } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../actions/taskActions';\r\nimport moment from 'moment';\r\nimport { Dropdown, DropdownMenu, DropdownToggle } from 'reactstrap';\r\n\r\nimport Form from './Form';\r\nimport TaskAction from './TaskAction';\r\nimport ScheduleAction from './ScheduleAction'\r\n\r\nfunction ListItem(props) {\r\n    const [openAction, setOpenAction] = useState(false);\r\n\r\n    const [openSchedule, setOpenSchedule] = useState(false);\r\n\r\n    const { findId, id, clearId, added, clearAdded, index, length } = props;\r\n\r\n    const scrollRef = useRef();\r\n\r\n    useEffect(() => {\r\n        let offsetTop = scrollRef.current.offsetTop;\r\n        if (findId === id) {\r\n            console.log('offsetTop :', offsetTop);\r\n            window.scrollTo({ top: offsetTop, behavior: \"smooth\", });\r\n            setTimeout(() => clearId(), 1000)\r\n        }\r\n        if (added && index === length) {\r\n            console.log('offsetTop :', offsetTop);\r\n            window.scrollTo({ top: offsetTop, behavior: \"smooth\", });\r\n            setTimeout(() => clearAdded(), 1000)\r\n        }\r\n    }, [findId, id, clearId, added, clearAdded, index, length])\r\n\r\n    const onpenEditForm = () => {\r\n        if (!props.showCompletedList) {\r\n            props.onpenEditForm(props.id);\r\n            props.cancelAdd();\r\n            props.toggle();\r\n        }\r\n    }\r\n\r\n    const highligt = () => {\r\n        if (openAction || openSchedule) {\r\n            return `highlight `\r\n        }\r\n        else if (props.findId === props.id) {\r\n            return `found `\r\n        }\r\n        else return undefined\r\n    }\r\n\r\n    const viewDate = () => {\r\n        let date = moment(props.date);\r\n        let differentDays = getDifferentDays();\r\n        if (differentDays === 0) {\r\n            return 'Today'\r\n        }\r\n        else if (differentDays === 1) {\r\n            return 'Tomorow'\r\n        }\r\n        else if (differentDays > 7) {\r\n            return moment(date).format(\"DD MMM\")\r\n        }\r\n        else {\r\n            return moment(date).format(\"dddd\")\r\n        }\r\n    }\r\n\r\n    const classNameCheckbox = () => {\r\n        return props.showCompletedList ? `checkbox completed-checkbox` : `checkbox color-priority-${props.priority}`\r\n    }\r\n\r\n    const classNameTaskName = () => {\r\n        return props.showCompletedList ? 'task-name completed-task-name' : 'task-name'\r\n    }\r\n\r\n    const getDifferentDays = () => {\r\n        let today = new Date().getDate();\r\n        let thisMonth = new Date().getMonth();\r\n        let date = props.date.getDate();\r\n        let monthDate = props.date.getMonth();\r\n        let differentDays;\r\n        if (monthDate === thisMonth) {\r\n            differentDays = date - today;\r\n            return differentDays;\r\n        }\r\n        else return differentDays = 8;\r\n    }\r\n\r\n    const textLine = () => {\r\n        let differentDays = getDifferentDays();\r\n        if (differentDays === 0) {\r\n            return \"schedule today\"\r\n        }\r\n        else if (differentDays === 1) {\r\n            return \"schedule tomorrow\"\r\n        }\r\n        else if (differentDays > 7) {\r\n            return \"schedule\"\r\n        }\r\n        else {\r\n            return \"schedule weekdays\"\r\n        }\r\n    }\r\n\r\n    const completedTask = () => {\r\n        props.showCompletedList ? props.undoTask(props.id) : props.completedTask(props.id)\r\n    }\r\n\r\n    return (\r\n        props.idEdit === props.id ?\r\n            <tr >\r\n                <td colSpan=\"3\">\r\n                    <Form\r\n                        id={props.id}\r\n                        name={props.name}\r\n                        priority={props.priority}\r\n                        date={props.date}\r\n                    />\r\n                </td>\r\n            </tr>\r\n            :\r\n            <tr ref={scrollRef} className={highligt()}\r\n            >\r\n                <td>\r\n                    <label className={classNameCheckbox()}>\r\n                        <input onClick={() => completedTask()} type=\"checkbox\" />\r\n                        <i className=\"fa fa-check\"></i>\r\n                    </label>\r\n                </td>\r\n                <td>\r\n                    <span onClick={() => onpenEditForm()} className={classNameTaskName()}>{props.name}</span>\r\n                </td>\r\n                <td>\r\n                    {!props.showCompletedList\r\n                        ? <Dropdown isOpen={openSchedule} toggle={() => setOpenSchedule(!openSchedule)}>\r\n                            <DropdownToggle\r\n                                tag=\"span\"\r\n                                data-toggle=\"dropdown\"\r\n                                aria-expanded={openSchedule}\r\n                            >\r\n                                <span\r\n                                    className={textLine()}\r\n                                >\r\n                                    {viewDate()}\r\n                                </span>\r\n                            </DropdownToggle>\r\n                            <DropdownMenu\r\n                                className=\"p-0 rounded-0 m-0\"\r\n                            >\r\n                                <ScheduleAction\r\n                                    id={props.id}\r\n                                    toggle={() => setOpenSchedule(false)}\r\n                                    openSchedule={openSchedule}\r\n                                    date={props.date}\r\n                                />\r\n                            </DropdownMenu>\r\n                        </Dropdown>\r\n                        : ''\r\n                    }\r\n                </td>\r\n                <td>\r\n                    {!props.showCompletedList\r\n                        ? <TaskAction\r\n                            id={props.id}\r\n                            priority={props.priority}\r\n                            index={props.index}\r\n                            openAction={() => setOpenAction(!openAction)}\r\n                        />\r\n                        : ''\r\n                    }\r\n                </td>\r\n            </tr >\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    idEdit: state.editReducer.id,\r\n    indexAction: state.actionReducer.index,\r\n    findId: state.taskReducer.id,\r\n    added: state.addReducer.added\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    completedTask: id => dispatch(actions.completedTask(id)),\r\n    undoTask: id => dispatch(actions.undoTask(id)),\r\n    onpenEditForm: (index) => dispatch(actions.openEditForm(index)),\r\n    cancelAdd: () => dispatch(actions.cancelAdd()),\r\n    openTaskAction: index => dispatch(actions.openTaskAction(index)),\r\n    closeTaskAction: () => dispatch(actions.closeTaskAction()),\r\n    clearId: () => dispatch(actions.clearId()),\r\n    clearAdded: () => dispatch(actions.clearAdded())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListItem);","import React, { useEffect, useRef } from 'react';\r\nimport ListItem from './ListItem';\r\n\r\nfunction List(props) {\r\n    const scrollRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        let offsetTop = scrollRef.current.getBoundingClientRect().top -200;\r\n        props.showCompletedList && window.scrollTo({top: offsetTop, behavior: 'smooth'});\r\n    }, [props.showCompletedList])\r\n\r\n    return (\r\n        <div ref={scrollRef} className=\"section-list\">\r\n            <div className=\"list-holder\">\r\n                <table>\r\n                    <tbody>\r\n                        {props.taskList.length !== 0 ? props.taskList.map((task, index) => (\r\n                            <ListItem\r\n                                name={task.name}\r\n                                id={task.id}\r\n                                key={index}\r\n                                index={index}\r\n                                date={task.date}\r\n                                priority={task.priority}\r\n                                showCompletedList={props.showCompletedList}\r\n                                toggle={() => props.toggle && props.toggle()}\r\n                                length={props.taskList.length - 1}\r\n                            />\r\n                        )) : <tr key={\"empty\"} className=\"empty-list\">\r\n                                {props.showCompletedList && <td>No completed tasks</td>}\r\n                            </tr>}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default List;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../actions/taskActions';  \r\n\r\nfunction AddTask(props) {\r\n    const openForm = () => {\r\n        !props.isEdit && props.openForm();\r\n        props.toggle && props.toggle();\r\n    }\r\n    return (\r\n        <div onClick={() => openForm()} className=\"add-task\">\r\n            <span className=\"add-icon\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"13\" height=\"13\" viewBox=\"0 0 13 13\" data-svgs-path=\"sm1/plus.svg\"><path fill=\"currentColor\" fillRule=\"evenodd\" d=\"M6 6V.5a.5.5 0 0 1 1 0V6h5.5a.5.5 0 1 1 0 1H7v5.5a.5.5 0 1 1-1 0V7H.5a.5.5 0 0 1 0-1H6z\"></path></svg>\r\n            </span>\r\n            <span className=\"add-action\">Add task</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    isEdit: state.editReducer.isEdit\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    openForm: () => dispatch(actions.openForm())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTask);\r\n\r\n","import React, { useState } from 'react';\r\nimport { Dropdown, DropdownToggle, DropdownMenu } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../actions/taskActions';\r\n\r\nfunction ProjectAction(props) {\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const sortBy = value => {\r\n        props.sortBy(value);\r\n        setOpen(false);\r\n    }\r\n\r\n    const showCompletedList = () => {\r\n        props.showCompletedList();\r\n        setOpen(false);\r\n    }\r\n\r\n    return (\r\n        <Dropdown isOpen={open} toggle={() => setOpen(!open)}>\r\n            <DropdownToggle\r\n                tag=\"span\"\r\n                data-toggle=\"dropdown\"\r\n                aria-expanded={open}\r\n            >\r\n                <span className=\"action-button\">\r\n                    <i className=\"fa fa-ellipsis-h\"></i>\r\n                </span>\r\n            </DropdownToggle>\r\n            <DropdownMenu className=\"p-0 rounded-0 m-0 project-action\">\r\n                <div className=\"task-action\" >\r\n                    <div \r\n                        onClick={() => sortBy('date')}\r\n                        className=\"item\"\r\n                    >\r\n                        <span><i className=\"fa fa-calendar icon-label\"></i></span>\r\n                        <span className=\"name-label\">Sort by date</span>\r\n                    </div>\r\n                    <div \r\n                        onClick={() => sortBy('priority')}\r\n                        className=\"item\">\r\n                        <span><i className=\"fa fa-flag-o icon-label\"></i></span>\r\n                        <span className=\"name-label\">Sort by priority</span>\r\n                    </div>\r\n                    <div \r\n                        onClick={() => sortBy('name')}\r\n                        className=\"item\">\r\n                        <span><i className=\"fa fa-sort-alpha-asc icon-label\"></i></span>\r\n                        <span className=\"name-label\">Sort by name</span>\r\n                    </div>\r\n                    <div \r\n                        onClick={() => showCompletedList()}\r\n                        className=\"item\"\r\n                    >\r\n                        <span><i className=\"fa fa-check-circle-o icon-label\"></i></span>\r\n                        <span className=\"name-label\">Show completed tasks</span>\r\n                    </div>\r\n                </div>\r\n            </DropdownMenu>\r\n        </Dropdown>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    sortBy: value => dispatch(actions.sortBy(value)),\r\n    showCompletedList: () => dispatch(actions.showCompletedList())\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(ProjectAction);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../actions/taskActions';  \r\nimport empty from '../empty.svg';\r\n\r\nfunction Empty(props) {\r\n    return (\r\n        <div className=\"empty\">\r\n            <div className=\"empty-image\">\r\n                <img src={empty} alt=\"empty\" />\r\n            </div>\r\n            <div className=\"empty-header\">\r\n                All clear\r\n            </div>\r\n            <div className=\"empty-body\">\r\n                Looks like everything's organized in the right place.\r\n            </div>\r\n            <button onClick={() => props.openForm()} className=\"add-button btn btn-danger\">\r\n                Add a task\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    openForm: () => dispatch(actions.openForm())\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(Empty);","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport List from './List';\r\nimport AddTask from './AddTask';\r\nimport Form from './Form';\r\nimport ProjectAction from './ProjectAction';\r\nimport Empty from './Empty';\r\n\r\nfunction Content(props) {\r\n    let { name } = props;\r\n    return (\r\n        <div className=\"content\">\r\n            <div className=\"project-header\">\r\n                <span className=\"project-name\">\r\n                    {name}\r\n                </span>\r\n                {name === 'Inbox'\r\n                    && <div className=\"project-action\">\r\n                        <ProjectAction />\r\n                        <span className=\"action-tip\">\r\n                            Project action\r\n                        </span>\r\n                    </div>}\r\n            </div>\r\n            <List\r\n                taskList={props.list}\r\n            />\r\n            {props.isAdd\r\n                && <div className=\"padding-right-5\">\r\n                    <Form />\r\n                </div>}\r\n            <AddTask />\r\n            {props.showCompletedList\r\n                && <List\r\n                    taskList={props.completedList}\r\n                    showCompletedList={props.showCompletedList}\r\n                />\r\n            }\r\n            {props.list.length === 0 && <Empty />}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    isAdd: state.addReducer.isAdd,\r\n    showCompletedList: state.viewCompletedList.show,\r\n    completedList: state.taskReducer.taskList.completedList,\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(Content);","import React from 'react';\r\nimport moment from 'moment';\r\nimport { connect } from 'react-redux';\r\n\r\nimport List from './List';\r\nimport Form from './Form';\r\nimport AddTask from './AddTask';\r\n\r\nfunction DayList(props) {\r\n    let { index } = props;\r\n    const subsection = () => {\r\n        if (props.index === 0) {\r\n            return \"Today\"\r\n        }\r\n        else if (props.index === 1) {\r\n            return \"Tomorrow\"\r\n        }\r\n        else {\r\n            return moment().add(index, 'd').format(\"dddd\");\r\n        }\r\n    }\r\n\r\n    const subsectionDate = () => {\r\n        return moment().add(index, 'd').format('ddd DD MMM');\r\n    }\r\n\r\n    const dayList = () => {\r\n        let { index } = props;\r\n        let date = moment().add(index, 'days').date();\r\n        let list = props.list.filter(task =>  date === task.date.getDate() );\r\n        return list;\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"day\">\r\n                <span>{subsection()}</span>\r\n                <span className=\"subsection-date\">{subsectionDate()}</span>\r\n            </div>\r\n            <List\r\n                taskList={dayList()}\r\n                toggle={() => props.closeAdd()}\r\n            />\r\n            {props.add === props.index\r\n                && <div className=\"padding-right-5\">\r\n                    <Form\r\n                        toggle={() => props.closeAdd()}\r\n                        weekDay={props.index}\r\n                    />\r\n                </div>\r\n            }\r\n            <AddTask\r\n                toggle={() => props.openAdd(index)}\r\n            />\r\n        </ React.Fragment>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(DayList);","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport DayList from './DayList';\r\nimport ProjectAction from './ProjectAction';\r\nimport Empty from './Empty';\r\n\r\nfunction ContentWeek(props) {\r\n    let { name } = props;\r\n    const day = [0, 1, 2, 3, 4, 5, 6];\r\n\r\n    const [add, setAdd] = useState(null);\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <div className=\"project-header\">\r\n                <span className=\"project-name\">\r\n                    {name}\r\n                </span>\r\n                {name === 'Inbox'\r\n                    && <div className=\"project-action\">\r\n                        <ProjectAction />\r\n                        <span className=\"action-tip\">\r\n                            Project action\r\n                        </span>\r\n                    </div>}\r\n            </div>\r\n            {day.map(index => (\r\n                <DayList\r\n                    list={props.list}\r\n                    index={index}\r\n                    key={index}\r\n                    add={add}\r\n                    closeAdd={() => setAdd(null)}\r\n                    openAdd={index => setAdd(index)}\r\n                />\r\n            ))}\r\n            {props.list.length === 0 && <Empty />}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    isAdd: state.addReducer.isAdd\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(ContentWeek);","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../actions/taskActions';\r\nimport Form from '../components/Form'\r\n\r\nfunction AddModal(props) {\r\n    let [clear, setClear] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setClear(!props.isQuickAdd)\r\n    }, [props.isQuickAdd])\r\n\r\n    const closeQuickAdd = () => {\r\n        props.closeQuickAdd();\r\n        setClear(true);\r\n    }\r\n\r\n    return (\r\n        <div className={props.isQuickAdd ? \"add-modal visible opacity\" : \"add-modal\"}>\r\n            <div onClick={() => props.closeQuickAdd()}\r\n                className=\"add-modal-background\">\r\n            </div>\r\n            <div className=\"add-modal-form\">\r\n                <div className=\"add-modal-header\">\r\n                    <span>Quick Add Task</span>\r\n                    <span onClick={() => closeQuickAdd()} className=\"close\">\r\n                        <svg viewBox=\"0 0 24 24\" className=\"icon_close\" width=\"18\" height=\"18\"><path fill=\"currentColor\" d=\"M11.3 12L5 5.9A.5.5 0 1 1 6 5l6.1 6.2L18.1 5a.5.5 0 0 1 .8.8L12.7 12l6.2 6.1a.5.5 0 0 1-.8.8L12 12.7 5.9 19A.5.5 0 0 1 5 18l6.2-6.1z\"></path></svg>\r\n                    </span>\r\n                </div>\r\n                <Form\r\n                    clear={clear}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    isQuickAdd: state.addReducer.isQuickAdd\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    closeQuickAdd: () => dispatch(actions.closeQuickAdd())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddModal);","import React, {useEffect} from 'react';\r\nimport './App.scss'\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport TopBar from './components/TopBar';\r\nimport LeftMenu from './components/LeftMenu';\r\nimport Content from './components/Content';\r\nimport ContentWeek from './components/ContentWeek';\r\nimport AddModal from './components/AddModal';\r\n\r\n\r\nfunction App(props) {\r\n  let { list, listToday, listWeek } = props;\r\n\r\n  useEffect(() => props.hideLoader(), [props])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <BrowserRouter>\r\n        <TopBar />\r\n        <LeftMenu />\r\n        <AddModal />\r\n        <Switch>\r\n          <Route exact path=\"/\" render={props => (<Content {...props} name={\"Inbox\"} list={list} />)} />\r\n          <Route exact path=\"/today\" render={props => (<Content {...props} name={\"Today\"} list={listToday} />)} />\r\n          <Route exact path=\"/next-7-days\" render={props => (<ContentWeek {...props} name={\"Next 7 days\"} list={listWeek} />)} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  list: state.taskReducer.taskList.list,\r\n  listToday: state.taskReducer.taskList.listToday,\r\n  listWeek: state.taskReducer.taskList.listWeek\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport reducer from './reducers/index';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst loader = document.querySelector('.loader');\r\n\r\nconst showLoader = () => loader.classList.remove('loader--hide');\r\n\r\nconst hideLoader = () => loader.classList.add('loader--hide');\r\n\r\nlet store = createStore(reducer);\r\n\r\nsetTimeout(() =>\r\n    ReactDOM.render(\r\n        <Provider store={store}>\r\n            <App\r\n                hideLoader={hideLoader}\r\n                showLoader={showLoader}\r\n            />\r\n        </Provider>,\r\n        document.getElementById('root')\r\n    )\r\n, 100)\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}